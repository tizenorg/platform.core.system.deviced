CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
PROJECT(deviced C)

########################################################
# Build options:
########################################################
IF("${ARCH}" STREQUAL "emulator")
	OPTION(USE_EMULATOR "Use Emulator" ON)
ELSEIF("${ARCH}" STREQUAL "arm")
	OPTION(USE_ARM "Use Arm" ON)
ENDIF()

IF("${ARCH_BIT}" STREQUAL "32")
	OPTION(USE_32BIT "Use 32bit architecture" ON)
ELSEIF("${ARCH_BIT}" STREQUAL "64")
	OPTION(USE_64BIT "Use 64bit architecture" ON)
ENDIF()

########################################################
# Deviced Macros
########################################################
IF("${PROFILE}" STREQUAL "wearable")
	IF("${ARCH}" STREQUAL "arm")
		ADD_DEFINITIONS("-DWEARABLE_CIRCLE")
	ENDIF()
ENDIF()

MACRO(ADD_SOURCE DIR OUT)
	FILE(GLOB ALL_SRCS "${DIR}/*.c")
	FOREACH(SRC ${ALL_SRCS})
		IF(NOT ${SRC} MATCHES "ivi|mobile|wearable|tv|none")
			SET(D_SRCS ${D_SRCS} ${SRC})
		ENDIF()
	ENDFOREACH()
	FILE(GLOB S_SRCS "${DIR}/*-${PROFILE}.c")
	IF(DEFINED S_SRCS)
		SET(D_SRCS ${D_SRCS} ${S_SRCS})
	ENDIF()
	SET(${OUT} ${D_SRCS})
ENDMACRO()

MACRO(INSTALL_CONF DIR CONF)
	SET(T_CONF ${DIR}/${CONF}-${PROFILE}.conf)
	SET(E_CONF ${DIR}/${CONF}-emul-${PROFILE}.conf)
	IF(USE_EMULATOR AND EXISTS ${E_CONF})
		SET(T_CONF ${E_CONF})
	ENDIF()
	IF(NOT EXISTS ${T_CONF})
		SET(T_CONF ${DIR}/${CONF}.conf)
	ENDIF()
	IF(DEFINED T_CONF)
		INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${T_CONF}
			DESTINATION /etc/deviced
			RENAME ${CONF}.conf)
	ENDIF()
ENDMACRO()

########################################################
# Deviced CMakeLists.txt
########################################################
SET(PREFIX ${CMAKE_INSTALL_PREFIX})
SET(EXEC_PREFIX "${PREFIX}/bin")
SET(INCLUDEDIR "${PREFIX}/include/${PROJECT_NAME}")
SET(DATADIR "${PREFIX}/share/${PROJECT_NAME}")
SET(CONFDIR "/etc/${PROJECT_NAME}")
SET(VERSION 0.1.0)

SET(SRCS
	src/apps/apps.c
	src/control/control.c
	src/core/common.c
	src/core/config-parser.c
	src/core/device-idler.c
	src/core/device-notifier.c
	src/core/devices.c
	src/core/edbus-handler.c
	src/core/execute.c
	src/core/launch.c
	src/core/log.c
	src/core/main.c
	src/core/sig-handler.c
	src/core/udev.c
	src/proc/cpu-info.c
	src/proc/proc-handler.c
	src/time/time-handler.c
)

IF(BATTERY_MODULE STREQUAL on)
	ADD_SOURCE(src/battery BATTERY_SRCS)
	SET(SRCS ${SRCS} ${BATTERY_SRCS})
ENDIF()

IF(BLOCK_MODULE STREQUAL on)
	ADD_SOURCE(src/block BLOCK_SRCS)
	SET(SRCS ${SRCS} ${BLOCK_SRCS})
ENDIF()

IF(EXTCON_MODULE STREQUAL on)
	ADD_SOURCE(src/extcon EXTCON_SRCS)
	SET(SRCS ${SRCS} ${EXTCON_SRCS})
ENDIF()

IF(HAPTIC_MODULE STREQUAL on)
	ADD_SOURCE(src/haptic HAPTIC_SRCS)
	SET(SRCS ${SRCS} ${HAPTIC_SRCS})
ENDIF()

IF(LED_MODULE STREQUAL on)
	ADD_SOURCE(src/led LED_SRCS)
	SET(SRCS ${SRCS} ${LED_SRCS})
ENDIF()

IF(STORAGE_MODULE STREQUAL on)
	ADD_SOURCE(src/storage STORAGE_SRCS)
	SET(SRCS ${SRCS} ${STORAGE_SRCS})
ENDIF()

IF(TOUCHSCREEN_MODULE STREQUAL on)
	ADD_SOURCE(src/touchscreen TOUCHSCREEN_SRCS)
	SET(SRCS ${SRCS} ${TOUCHSCREEN_SRCS})
ENDIF()

IF(TZIP_MODULE STREQUAL on)
	ADD_SOURCE(src/tzip TZIP_SRCS)
	SET(SRCS ${SRCS} ${TZIP_SRCS})
ENDIF()

IF(POWER_MODULE STREQUAL on)
	ADD_SOURCE(src/power POWER_SRCS)
	SET(SRCS ${SRCS} ${POWER_SRCS})
ENDIF()

IF(DISPLAY_MODULE STREQUAL on)
	ADD_SOURCE(src/display DISPLAY_SRCS)
	SET(SRCS ${SRCS} ${DISPLAY_SRCS})

	IF("${DPMS}" STREQUAL "x")
		SET(SRCS ${SRCS} src/display/dpms-x-none.c)
	ELSEIF("${DPMS}" STREQUAL "wayland")
		SET(SRCS ${SRCS} src/display/dpms-wayland-none.c)
	ENDIF()
ENDIF()

# usb client
IF(${USB_MODULE} STREQUAL on)
	ADD_SOURCE(src/usb USB_SRCS)
	SET(SRCS ${SRCS} ${USB_SRCS})
ENDIF()

# usb host
IF(${USBHOST_MODULE} STREQUAL on)
	ADD_SOURCE(src/usbhost USBHOST_SRCS)
	SET(SRCS ${SRCS} ${USBHOST_SRCS})
ENDIF()

IF(IR_MODULE STREQUAL on)
	ADD_SOURCE(src/ir IR_SRCS)
	SET(SRCS ${SRCS} ${IR_SRCS})
ENDIF()

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/src)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/src/deviced)

SET(PKG_MODULES
	ecore
	edbus
	vconf
	dlog
	libudev
	device-node
	capi-base-common
	glib-2.0
	dbus-1
	gio-2.0
	eventsystem
	libtzplatform-config
	hwcommon
)

IF(DISPLAY_MODULE STREQUAL on)
	IF("${DPMS}" STREQUAL "x")
		SET(PKG_MODULES ${PKG_MODULES} x11 xext)
	ENDIF()
	SET(PKG_MODULES ${PKG_MODULES} libinput capi-system-sensor)
ENDIF()
IF(STORAGE_MODULE STREQUAL on)
	SET(PKG_MODULES ${PKG_MODULES} storage)
ENDIF()
IF(TELEPHONY_MODULE STREQUAL on)
	SET(PKG_MODULES ${PKG_MODULES} tapi)
ENDIF()
IF(TZIP_MODULE STREQUAL on)
	SET(PKG_MODULES ${PKG_MODULES} minizip fuse)
ENDIF()

INCLUDE(FindPkgConfig)
pkg_check_modules(pkgs REQUIRED ${PKG_MODULES})

FOREACH(flag ${pkgs_CFLAGS})
	SET(EXTRA_CFLAGS "${EXTRA_CFLAGS} ${flag}")
ENDFOREACH(flag)

SET(EXTRA_CFLAGS "${EXTRA_CFLAGS} -fvisibility=hidden")
SET(EXTRA_CFLAGS "${EXTRA_CFLAGS} -g -fno-omit-frame-pointer -finstrument-functions")
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${EXTRA_CFLAGS} -lrt")

ADD_DEFINITIONS("-DPREFIX=\"${CMAKE_INSTALL_PREFIX}\"")
ADD_DEFINITIONS("-DFACTORYFS=\"$ENV{FACTORYFS}\"")
ADD_DEFINITIONS("-DLIBPATH=\"${LIB_INSTALL_DIR}\"")
ADD_DEFINITIONS("-DENABLE_DEVICED_DLOG")
ADD_DEFINITIONS("-DENABLE_LIBDEVICED_DLOG")
ADD_DEFINITIONS("-DENABLE_PM_LOG")
IF(PROFILE STREQUAL tv)
	ADD_DEFINITIONS("-DPROFILE_TV")
ENDIF()
IF(PROFILE STREQUAL mobile)
	ADD_DEFINITIONS("-DPROFILE_MOBILE")
ENDIF()
IF(USE_ARM)
	ADD_DEFINITIONS("-DTARGET")
ELSEIF(USE_EMULATOR)
	ADD_DEFINITIONS("-DEMULATOR")
ENDIF()
IF(USE_32BIT)
	ADD_DEFINITIONS("-DARCH_32BIT")
ELSEIF(USE_64BIT)
	ADD_DEFINITIONS("-DARCH_64BIT")
ENDIF()
ADD_DEFINITIONS("-DDEBUG")

ADD_EXECUTABLE(${PROJECT_NAME} ${SRCS})
TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${pkgs_LDFLAGS} "-ldl" "-lm" shared)
INSTALL(TARGETS ${PROJECT_NAME} DESTINATION bin)

INSTALL(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/src/deviced/ DESTINATION include/${PROJECT_NAME}
		FILES_MATCHING
		PATTERN "*_doc.h" EXCLUDE
		PATTERN "*.h")

IF(BATTERY_MODULE STREQUAL on)
	INSTALL_CONF(src/battery battery)
ENDIF()
IF(BLOCK_MODULE STREQUAL on)
	INSTALL_CONF(src/block block)
	INSTALL(PROGRAMS ${CMAKE_CURRENT_SOURCE_DIR}/scripts/mmc-smack-label DESTINATION bin)
ENDIF()

IF(DISPLAY_MODULE STREQUAL on)
	INSTALL_CONF(src/display display)
ENDIF()

IF(STORAGE_MODULE STREQUAL on)
	INSTALL_CONF(src/storage storage)
ENDIF()

# USB connection
IF(${USB_MODULE} STREQUAL on)
	INSTALL_CONF(src/usb usb-setting)
	INSTALL_CONF(src/usb usb-operation)

	# USB (Manual setting)
	INSTALL(PROGRAMS ${CMAKE_CURRENT_SOURCE_DIR}/scripts/direct_set_debug.sh DESTINATION bin)
ENDIF()

INSTALL(PROGRAMS ${CMAKE_CURRENT_SOURCE_DIR}/scripts/deviced-pre.sh DESTINATION bin)
INSTALL(PROGRAMS ${CMAKE_CURRENT_SOURCE_DIR}/scripts/movi_format.sh DESTINATION bin)
INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/scripts/deviced.conf DESTINATION /etc/dbus-1/system.d)

CONFIGURE_FILE(${PROJECT_NAME}.pc.in ${PROJECT_NAME}.pc @ONLY)
INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.pc DESTINATION ${LIB_INSTALL_DIR}/pkgconfig)

INSTALL(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/systemd/ DESTINATION lib/systemd/system
		FILES_MATCHING
		PATTERN "*.service"
		PATTERN "*.socket")

ADD_SUBDIRECTORY(src/shared)
ADD_SUBDIRECTORY(src/libdeviced)
ADD_SUBDIRECTORY(src/devicectl)
IF(BLOCK_MODULE STREQUAL on)
	ADD_SUBDIRECTORY(src/fsck-msdos)
	ADD_SUBDIRECTORY(src/newfs-msdos)
ENDIF()
